[{"name":"Getting started","description":"Getting started with shopizer","path":"/starting","text":"What's new ! Star\n\nShopizer reference architecture\n\nShopizer reference architecture","wordCount":8,"type":"Content"},{"name":"What is Shopizer","description":"Shopizer is an open source e-commerce software licenced under Apache V2 licence","path":"/starting/whatisshopizer","text":"Shopizer is enterprise open source e-commerce software for retailers who want flexibility, speed and control of their commerce platform. Shopizer is a software solution that gives organizations the ultimate flexibility to take an experience-first approach to commerce, with simple powerful APIs and built in stores models.\n\nKey technical benefits\n\n  Built with Spring framework\n  Vulnerability checks\n  Open source and open standards\n  Cloud Ready: Deploy Shopizer in the public\n  or private cloud on Amazon Webservices (AWS), Microsoft\n  Azure or Google Cloud Platform (GCP)\n  Run on premise servers\n  Run from Docker containers\n  Run from any Java servlet containers\n\nShopizer is a an application composed of a set of services written in Java that serves functionality needed to build entreprise e-commerce systems.\n\nThe software can be used out of the box as a complete ready to use web application including a few web stores templates you can choose from. Shopizer can also be used as a restful backend application for serving a whole set of commerce REST apis on which you can build your own tailored e-commerce front store.\n\nShopizer e-commerce system provides the following functionality:\n  Catalog management\n  Shopping cart\n  Content management\n  Marketing components\n  Smart pricing\n  Ordering\n  Payment\n  Shipping\n\n  |Scope|Features|\n|--- |--- |\n|Software|Supports MySQL|\n|Software|Supports Oracle|\n||Supports Postgresql|\n||Supports MariaDB|\n||Supports H2|\n||Java - Spring Boot|\n||REST API|\n||Cloud centric|\n||Container based|\n||Open source Apache v2 licence|\n|Catalog management|SKU based product management|\n||One to many prices per item|\n||Simple time based promotion|\n||Complex promotions (Based on JBoss Drools)|\n||Category hierarchy|\n||Product options|\n||Custom product properties|\n||B2C|\n||B2B|\n||C2C|\n||Multiple stores|\n|Promotions|Promotions applicable at item level|\n||Promotions applicable at cart level|\n|Customer management|Self serve customer entry point|\n||Social authentication|\n||Customer registration|\n||Rule based engine|\n||Multiple currency|\n|Ordering|Multiple payment modules|\n||Multiple shipping modules|\n||Promotions based on shipping rules|\n||Promotions based vatious property (quantity of items, customer...)|\n|REST API|Administration api|\n||Commerce api|\n||Customer api|\n||Order api|\n||Cart api|\n||Shipping api|\n||Payment api|\n||User api|\n||Search|\n|Search|Based on Elastic Search|\n||Search items|\n||Search autocomplete|\n|Languages|Our language translator converts to multiple language|\n\nSee also\n\nShopizer architecture","wordCount":285,"type":"Content"},{"name":"Shopizer architecture","description":"Shopizer architecture","path":"/starting/architecture","text":"Services\n\nShopizer implements B2B, B2C and C2C functionality offering the following services\n\nCatalog management\nUser management\nCustomer management\nContent management\nOrder management\nPricing management\nShopping cart management\nConfiguration management\nShipping\nPayment\nPromotions\nSearch\n\nTechnology stack is built on Java (java 8 0 java 11), Spring Boot (Core, Security, DATA JPA), JBoss Drools rules engine, Elastic Search and cloud services offered by GCP, AWS and Azure for infrastructure, storage and security.\n\nShopizer high level architecture\n\nShopizer high level architecture\n\nShopizer is a platform aiming to provide services, tools and connectors for building your own commerce cloud or on premise commerce application.\n\nServices are built using Spring Framework providing packages for building enterprise applications. Shopizer persistence uses JPA for connecting to MySQL (prefered), H2, Postgres or Oracle and has extensions for Google FirebaseNoSQL database and a set of interfaces for connecting to other external data sources.\n\nShopizer supports integration with external payment and shipping modules such as Stripe, Fedex, Braintree, USPS and more. A set of modules extensions allows using various content management storage such as JBoss Infinispan, AWS S3 and external web servers such as NGINX or Apache server. Elastic tools provide searching functionality.\n\nA REST api exposes all commerce functionality (B2C, B2B, C2C, Multi-Stores) as well as complete system administration. Spring Security configured of the box with JWT Bearer token authentication provides application interface authentication and authorization.\n\nMain foundation technology\n\n|  |  |\n|----------------|:---------:|\n| Spring Boot Shopizer is based on Spring Boot which makes it easy to create stand-alone, production-grade Applications that you can \"just run\". | SpringBoot |\n| Spring Security Shopizer is also based on Spring Security which is a framework that focuses on providing both authentication and authorization to Java applications. | SpringSecurity |\n| Spring Data JPA Data access is implemented using Spring Data JPA which makes easy data operations in a Java application. | Spring Data JPA |\n| Elastic search Search functionality is built on Elastic Search a tool for searching, analyzing, and visualizing commerce data data Elastic Search which makes easy data operations in a Java application. | Spring Data JPA |\n\nShopizer components\n\nShopizer components\n\nThe Component Model describes the entire hierarchy of components in terms of their responsibilities, their interfaces, their (static) relationships, and the way they collaborate to deliver required functionality.\n\nA component is a relatively independent part of a system. It is characterized by its responsibilities and eventually by the interface(s) it offers. Components can be decomposed into smaller components or composed into  arger components.\n\nCore\n\nSpring Data JPA (entity, repositories)\nServices\nRules (static and dynamic)\n\nModel\n\nEntity\n\nModules\n\nInterfaces\nInternal modules\nExternal modules\n\nShop\n\nController (Legacy)\nSecurity\nAPI\nFa√ßade\nDTOs\n\nOther documents\n\nArchitecture reference\n\nSee also\n\nWhat is Shopizer\nBeginning with Shopizer\n","wordCount":403,"type":"Content"},{"name":"Beginning with Shopizer","description":"Everything has a starting point","path":"/starting/starting","text":"Quick startup\n\nShopizer comes pre-configured with an embedded database (H2) and a demonstration store already configured for evaluation purpose. Shopizer can be downloaded from Github and run with a few commands as a starting point.\n\nGet Shopizer source code\n\n2 options are possible for getting Shopizer source code. First one is by using Git client if git software is installed on your computer or by downloading zip file from GitHub when you don't have git software installed\n\nClone shopizer using git command line\n\nIn order to perform this, you must have a git client installed on your workstation.\n\n$ git clone https://github.com/shopizer-ecommerce/shopizer.git\n\nThis will clone default Shopizer branch\n\nOr download Shopizer zip file from Git Hub\n\nShopizer download link\n\nRequirements\n\nShopizer is built using Java and requires Java Development Kit version 8 installed. First step is to check if java is installed. For this open a shell or command line.\n\n$ java -version\n\nIn order to build Shopizer you should have a complete Java SDK (software development kit) available on your machine. In order to verify if java sdk is installed on your computer use this command:\n\n$ javac\n\nYou should see which version of java is installed and if a SDK is available. Version 8 of java SDK is required and can be downloaded from here Java version 8\n\nFor any questions on software requirements and download process feel free to ask questions on Shopizer Forum\n\nSee Shopizer forum for asking Shopizer requirements related questions.\n\nSee also\n\nWhat is Shopizer\nBuild and run locally","wordCount":235,"type":"Content"},{"name":"Build and run locally","description":"Build and run on your local machine","path":"/starting/buildandrunlocally","text":"Run locally\n\nThe purpose of this section is to provide new users with the basics of Shopizer e-commerce framework in order to get started in their projects. It will walk the reader through the steps of installing and configuring Shopizer as well as running demo application locally.\n\nThese instructions are for running legacy Shopizer with JSP frontends as well as Shopizer backend version with Angular admin and React shop front.\n\nBuild Shopizer\n\nJava Backend\n\nFrom a terminal or console\n\ngit clone git@github.com:shopizer-ecommerce/shopizer.git\ncd shopizer\n\nBuild using Maven\n\nmvnw clean install\n\nThis command should result in a success message. If you have any errors during this process and require assistance,feel free to use Shopizer forum. See Shopizer forum for asking or searching Shopizer build related questions.\n\nStart Shopizer\n\ncd sm-shop\nmvnw spring-boot:run\n\nOnce the terminal or console displays that Shopizer is running and listening on service port and ready to be used.\n\nOpen a browser and type url http://localhost:8080\n\nThis will open Shopizer demo store. In order to open administration tool type url http://localhost:8080/admin. You can login admin tool with user admin@shopizer.com and password password\n\nShopizer API http://localhost:8080/swagger-ui.html\n\nAnother alternative to run Shopizer locally is to run the application from latest Docker image.\n\nBuild Shopizer store React app\n\nReact App\n\nThis is a showcase React app consuming Shopizer services endpoints\n\nFrom a terminal or console\n\ngit clone git@github.com:shopizer-ecommerce/shopizer-shop-reactjs.git\ncd shopizer-shop-reactjs\n\nBuild using npm\n\nnpm i\n\nThis command should result in a success message. If you have any errors during this process and require assistance,feel free to use Shopizer forum. See Shopizer forum for asking or searching Shopizer build related questions.\n\nStart app\n\nnpm run dev\n\nOnce the terminal or console displays that Shopizer is running and listening on service port and ready to be used.\n\nOpen a browser and type url http://localhost\n\nSee also\n\nBeginning with Shopizer\nRun from Docker image","wordCount":276,"type":"Content"},{"name":"Technical documentation","description":"Shopizer technical documentation","path":"/starting/documentation","text":"Configuration\n\nRequired configurations\nDatabase configuration\nSearch configuration\n\nREST API\n\nAdministration\n\nAuthentication\nMerchant managemnt\nProduct management\nCategory management\nCatalog management\nContent management\nCustomer management\nOrder management\n\nShop\n\nTBD\n\nModules\n\nPayment modules\nShipping modules\n\nLanguages\n\nLanguages files\nCreate new language\n","wordCount":17,"type":"Content"},{"name":"Video tutorials","description":"Video tutorials on different topics","path":"/starting/videotutorials","text":"List of recents video tutorials\n\nRunning Angular API app with Shopizer backend\n\n> Running Angular app from VS Code and connecting to Shopizer backend in Eclipse\n\nAngular Shop and admin connecte to Shopizer REST backend\n\nShopizer content management with AWS S3 bucket\n\n> Configure AWS content management with AWS S3 bucket and Cloudfront\n\nAWS S3 Bucket\n\nAuthenticate users in Swagger UI\n\n> Authenticate administrators and customers for using REST apis from Swagger UI\n\nAuthentication in Swagger UI\n","wordCount":68,"type":"Content"},{"name":"Run Shopizer from Docker image","description":"Run latest Shopizer Docker container","path":"/starting/docker","text":"Shopizer's team deliver on a continuous basis improvements on Shopizer which are almost available immediately from DockerHub latest Shopizer image.\n\nGet latest Shopizer Docker image\n\nShopizer master branch is built on a regular basis and is avilable from DockerHub as latest tag. Docker version is available from Shopizer on DockerHub\n\nRun Docker image\n\nFrom a terminal or console\n\ndocker pull shopizerecomm/shopizer\n\nOpen a browser to http://localhost:8080\n\nAdministration is available from this url http://localhost:8080/admin\n\nusername: admin@shopizer.com\npassword: password\n\nThis container runs a simple demo of Shopizer for evaluation purpose. It uses H2 database and infinispan storage for images and files. See below how to configure container for production.\n\nBuild your own image\n\nDocker file is available in source code at this location shopizer/sm-shop/Dockerfile\n\nTo build your own image you need to execute the following comands\n\ncd shopizer\nmvnw clean install\ncd sm-shop\ndocker build .\n\nSee also\n\nRun Shopizer componsnts with Docker Compose\nDeploying Shopizer on AWS LightSail","wordCount":137,"type":"Content"},{"name":"Run using Docker Compose","description":"Run latest Shopizer components in Docker Copose","path":"/starting/docker-compose","text":"Shopizer's team delivers on a continuous basis improvements on Shopizer which are almost available immediately from DockerHub latest Shopizer image.\n\nRun Shopizer componentswith Docker Compose\n\nRequirements: Have Docker Compose installed. See Docker Compose installation instructions.\n\nDocker Compose simplifies configurtion and container dependency with the configuration of a yaml file that lets connect Shopizer to outer dependencies such as Elastic Search and MySQL.\n\nservices:\n  shopizer-db:\n    environment:\n      MYSQLROOTPASSWORD=shopizer123\n      MYSQL_DATABASE=SALESMANAGER\n      MYSQLUSER=shopizerdb_user\n      MYSQL_PASSWORD=my-password\n    image: mysql/mysql-server:5.7\n    container_name: shopizer-db\n    networks:\n      shopizer-network\n    ports:\n      \"3307:3306\"\n    volumes:\n      ./db:/var/lib/mysql\n  shopizer:\n    depends_on:\n      shopizer-db\n    environment:\n      \"SPRINGPROFILESACTIVE=dependency\"\n      \"JAVA_OPTS=-Xms1024m -Xmx1024m\"\n      \"elasticsearch.server.host=shopizer-es\"\n      \"elasticsearch.server.port=9200\"\n      \"db.jdbcUrl=jdbc:mysql://shopizer-db:3306/SALESMANAGER?autoReconnect=true&serverTimeZone=UTC&useUnicode=true&characterEncoding=UTF-8\"\n      \"db.user=shopizerdbuser\"\n      \"db.password=my-password\"\n      \"elasticsearch.security.password=NOTREQUIRED\"\n      \"config.displayShipping=true\"\n      \"config.googleMapsKey=NO\"\n      \"config.recaptcha.secretKey=NO\"\n      \"config.recaptcha.siteKey=NO\"\n      \"config.shippingDistancePreProcessor.acceptedZones=QC,ON,NB,NY,CA,FL,NC,SC\"\n      \"config.shippingDistancePreProcessor.apiKey=NO\"\n    image: shopizerecomm/shopizer:latest\n    container_name: shopizer\n    mem_limit: 1024m\n    networks:\n      shopizer-network\n    links:\n      shopizer-db\n      shopizer-es\n    depends_on:\n      shopizer-db\n      shopizer-es\n    ports:\n      \"8080:8080\"\n  shopizer-es:\n    environment:\n      \"cluster.name=shopizer\"\n      \"bootstrap.memory_lock=true\"\n      \"discovery.type=single-node\"\n      \"ESJAVAOPTS=-Xms512m -Xmx512m\"\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2\n    container_name: shopizer-es\n    networks:\n      shopizer-network\n    mem_limit: 1g\n    ports:\n      \"9200:9200\"\n    ulimits:\n      memlock:\n        hard: -1\n        soft: -1\n    volumes:\n      ./es:/usr/share/elasticsearch/data\nversion: \"2.2\"\n\nnetworks:\n  shopizer-network:\n\nCopy the file above in a text file and name it docker-compose.yml\nThe content of this file consist of minimal configurations for running shopizer configured with Elastic Search and MySQL.\n\nA working version of Docker compose configuration can be found here Docker Compose for Shopizer\n\nTo run dependency project (Shopizer + Elastic Search + MySQL), cd to the directoy where you have created docker-compose.yml file and type this command:\n\n$ docker-compose up\n\nThis will start an empty store that you can start building with MySQL and Elastic Search running. Take note that MySQL is running on port 3307 and ElasticSearch on port 9200. In case of conflicts those ports can be changed.\n\nYou can connect to MySQL using your SQL client. Password as specified in docker-compose.yml is my-password\n\nmysql -u shopizerdbuser -p -h 127.0.0.1:3307\n\nSee also\n\nDeploying Shopizer on AWS LightSail","wordCount":267,"type":"Content"},{"name":"Run in the cloud","description":"Run Shopizer in various clouds","path":"/starting/cloud","text":"AWS\n\nSimple LightSail (VM) with SSL\nSimple LightSail (VM) with managed SQL\nEC2 with load balancer and managed SQL\nECS (Elastic Container Service)\nEKS (Kubernetes)\n\nGoogle Cloud Platform\n\nOpenShift","wordCount":22,"type":"Content"},{"name":"Contribute to Shopizer","description":"We are looking for your expertise","path":"/starting/contribute","text":"See Shopizer forum for asking technical related questions\nSee Shopizer current open bugs and issues list\n\nShopizer is driven by a community of Java and e-commerce passionates. If you are interested in joining our community of developers or want to share functionality to Shopizer feel free to get in touch with us through ou Contact form.\n\nBE PART OF THE COMMUNITY\nNo matter what your skillset looks like we do have a place for everybody. Whether that's on backend or devops or marketing\nCurrently we do want to fill up roles in the below categories.\n\nCOMMERCE CREATIVITY\nNEW PAYMENT, SHIPPING AND OTHER INTEGRATIONS\nCREATE NEW SHOPPING EXPERIENCES (REACTJS, VUE, ANGULAR, STENCIL, CSS, MOBILE ETC...)\nBUG FIXING\nHELPING US WITH NEW RELEASES\nMARKETING\nSELLING\n\nNeed to interact with us ? Join our ChatOps on slack ! This is through invite only so send us your email address, you'll be added to our live discussion group.\n\nSlack channel entry point\n\nOur Website for further information\n\nTODO describe PR\n","wordCount":150,"type":"Content"},{"name":"Shopizer configuration","description":"Shopizer configuration","path":"/documentation","text":"","wordCount":0,"type":"TOC"},{"name":"Required configurations","description":"In order to have complete e-commerce experience, this section describes all required Shopizer configurations","path":"/documentation/configuration","text":"Understanding configurations\n\nFor having the best e-commerce experience Shopizer requires a set of configurations including api keys and different pointers that can be used at runtime to provide functionality such as content management, sending emails, getting shipping quotes, displaying maps etc...\n\nThose configurations use underlying api keys and subsystem configurations that require to be created prealabely. Those configurations are not mandatory and Shopizer will work with reduced features if not configured.\n\nExternal configurations\n\nGoogle Maps API\nGoogle Places API\nAWS SES (Simple Email Service)\nGoogle reCaptcha API\nAWS S3 Bucket\nGoogle Bucket\n\nWhat are those configurations used for\n\n|Scope           |Provider                       |Description                                           |\n|----------------|-------------------------------|------------------------------------------------------|\n|Contact us      |Google Maps API                |Display a Map containing store location               |\n|Contact us      |Google reCaptcha API           |' I am not a Robot ' - Contact Form                   |\n|Contact Us      |Send emails from contact us    |Use AWS SES service for sending emails                |\n|Shipping quote  |Google Geocoder API            |Determine shipping distance                           |\n|Order           |Google Places API              |Validate customer shipping address                    |\n|Order           |Google Maps API                |Display customer shipping location                    |\n|Order           |Send order emails              |Use AWS SES service for sending emails                |\n|Content         |Content images on AWS          |Use S3 buckets and cloudfront to serve images         |\n|Content         |Content images on GCP Buckets  |Use GCP buckets and cloudfront to serve images        |\n\nHow to get those configurations\n\nGoogle Maps API, Geocoding API, Places API\n> Get Google MAPS, Geocoding and Places API keys\n> Follow instructions for Getting a Key (* Requires Google Cloud Account)\n\nEnabling 3 apis\n   Maps javascript API\n   Geocoding API\n   Places API\n\nGoogle APIs diagram\n\nThen once apis are enabled keep keys aside to configure Shopizer\n\nGoogle keys diagram\n\nGoogle Places API\n\n> See procedure above\n\nGoogle Geocoder API\n\n> See procedure above\n\nGoogle reCaptcha\n\n> Get reCaptcha API keys\n> Register new keys here\n\nRegister your domains and subdomains but aslo localhost for testing the solution\n\nAWS S3 Bucket\n\nInfinispan is the technology used out of the box for managing images and files from a ingle instance of Shopizer. This solution works fine when working with Single instance and low to mid size traffic but would not scale for large traffic size or to serve multiple Shopizer running instances.\n\nOur recommendation for being able to manage images and files at scal is to use cloud based file management and use Cloudfront technology for serving files faster to visitors from any location.\n\nCration of S3 bucket and Cloudfront distribution requires an AWS account.\n\n>See this instruction video [https://www.google.com/recaptcha/admin/create] for creating an S3 bucket and a Cloudfront distribution on AWS.\n\nBucket creation in AWS\n\nBucket must be set public and have this policy attached\n\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::bucketname/*\"\n        }\n    ]\n}\n\nGoogle GCP Bucket\n\nGoogle Cloud Platform (GCP) also offers bucket and cloudfront technology for scaling images and files distribution.\n\nCreation of buckets and cloudfront requires a GCP account.\n\n>See this instruction video for creating abucket and a Cloudfront distribution on GCP\n\nShopizer configuration files\n\nShopizer configuration files are located in\n\nshopizer/sm-core/src/main/resources/shopizer-core.properties\n\nSpecific configuration files also exist for each profile\n\nshopizer/sm-core/src/main/resources/profiles/.../shopizer-core.properties\n\nWhich CMS method to use [ default | httpd | aws | gcp ]\ndefault = infinispan\nhttpd = requires http server\naws = AWS S3 -> See AWS S3 configuration below\ngcp = Google Cloud Storage\n\nconfig.cms.method=aws\n\n#AWS S3 configuration\n#Name of bucket files\n#Credentials must be set as environment variables when launching Shopizer\n#AWSACCESSKEY_ID=\n#AWSSECRETEACCESS_KEY=\nconfig.cms.contentUrl=AWSBUCKETURL\nconfig.cms.aws.bucket=AWS_BUCKET\nconfig.cms.aws.region=AWSBUCKETREGION\n\n#GCP Cloud Storage configuration\n#Name of the bucket file\n#If the bucket does not exists it will be created\n#export GOOGLEAPPLICATIONCREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\nconfig.cms.gcp.bucket=GCP_BUCKET\n\n#You need an AWS access key ID and AWS secret access key to access Amazon SES using an SDK\n#AWS keys need to be specified in environment variables\n#Email implementation [default | ses]\n#default=SpringHtmlEmailSender - through SMTP server and requires configurations from admin console\n#ses=AWS SES service\nconfig.emailSender=default\nconfig.emailSender.region=USEAST1\n\n#Google map API key\nconfig.shippingDistancePreProcessor.apiKey=GOOGLEMAPSKEY\n\n#checkout and signup address validation\nconfig.googleMapsKey=GOOGLEMAPSKEY\n\n#recaptcha https://developers.google.com/recaptcha/\n#testing keys\nconfig.recaptcha.secretKey=RECAPTCHA_SECRETKEY\nconfig.recaptcha.siteKey=RECAPTCHA_SITEKEY\n\nOther configurations\n\nThere are other configuration keys requiring attention\n\nWhich CMS method to use [ default | httpd | aws | gcp ]\nconfig.cms.method=default\n\n#Shipping activated in the system ?\nconfig.displayShipping=true\n\nconfig.shippingDistancePreProcessor.acceptedZones=QC,ON,AB,NY,MA\n\n#shipping rules\nconfig.shipping.rule.priceByDistance=PriceByDistance.drl\nconfig.shipping.rule.shippingModuleDecision=ShippingDecision.drl\n\n|Key                                        |Description                                     |Valeur defaut      |\n|-------------------------------------------|------------------------------------------------|-------------------|\n|config.cms.method                          |                                                |                   |\n|config.displayShipping                     |Google reCaptcha API                            |' I am not a Robot |\n|config.shipping.rule.priceByDistance       |Send emails from contact us                     |                   |\n|config.shipping.rule.shippingModuleDecision|Send emails from contact us                     |                   |\n\n####AWS S3 Bucket + CloudFront for servig images\n\nRequirements:\n\nHave an AWS account\nHave AWS user access key and secret access key handy\n\nThis video is a tutorial on the configuration of S3 and CloudFront to work as content management underlying CMS for Shopizer.\n\nAWS S3 Bucket\n\nBucket Policy\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicReadGetObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::example-bucket/*\"\n            ]\n        }\n    ]\n}\n\n####Google Cloud Platform Buckets and Cloud CDN for serving images\n\nAvailable soon","wordCount":702,"type":"Content"},{"name":"Database configuration","description":"Configure Shopizer database","path":"/documentation/database","text":"Database configuration\n\nShopizer has been tested and supports H2, MySQL (recommended), MariaDB, Postgresql and Oracle databases. Shopizer comes pre-configured with H2 database. H2 is an embedded database (http://www.h2database.com) configured by default to save data on files.\n\nThis pre-configuration should only be used for testing and never be used in a production environment.\n\nConfigure Shopizer with H2 database\nBy default H2 files are saved into your application server runtime directory.\nTo change the location where the files have to be saved,\nedit sm-shop/src/main/resources/database.properties and edit the line\ndb.jdbcUrl=jdbc\\:h2\\:file\\:c:/SALESMANAGER;AUTOCOMMIT\\=OFF;INIT\\=CREATE SCHEMA IF NOT EXISTS SALESMANAGER\n\nMake sure the file path is a valid existing directory. In this case the configuration file will be saved in c:\\\n\nConfigure Shopizer with MySQL\n\nLog to your MySQL as root and create schema SALESMANAGER\n\nmysql>CREATE DATABASE SALESMANAGER;\nmysql>GRANT USAGE, SELECT ON . TO @localhost IDENTIFIED BY '' with grant option;\nmysql>GRANT ALL ON SALESMANAGER.* TO @localhost;\nmysql>GRANT FILE ON . TO @localhost;\nmysql>FLUSH PRIVILEGES;\n\nExample\n\nmysql>CREATE DATABASE SALESMANAGER;\nmysql>GRANT USAGE, SELECT ON . TO testuser@localhost IDENTIFIED BY 'password' with grant option;\nmysql>GRANT ALL ON SALESMANAGER.* TO testuser@localhost;\nmysql>FLUSH PRIVILEGES;\n\nCreate user that can connect from everywhere\n\nmysql>CREATE USER 'mysuer'@'%' IDENTIFIED BY 'mypassword';\nmysql>GRANT USAGE, SELECT ON MYDB.* TO 'mysuer'@'%' with grant option;\nmysql>GRANT ALL ON MYDB.* TO 'mysuer'@'%';\nmysql>FLUSH PRIVILEGES;\n\nEdit sm-shop/src/main/resources/database.properties\n\ndb.jdbcUrl=jdbc:mysql://localhost:3306/SALESMANAGER?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8\ndb.user=YOUR USERNAME\ndb.password=YOUR PASSWORD\ndb.driverClass=com.mysql.jdbc.Driver\nhibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\ndb.preferredTestQuery=SELECT 1\n\ndb.schema=SALESMANAGER\nhibernate.hbm2ddl.auto=update\n\nNote: Database and table names are not case sensitive in Windows, and case sensitive in most varieties of Unix-Linux. Consequently MySQL which uses lower case schema and table names will not be able to see the schema and tables which are created upper case in Shopizer. If you get an exception of a table not being found and being displayed in lower case in the error message, you will have to specify this property in My.cnf. To resolve the issue set the lowercasetable_names to 1 in My.cnf configuration file.\n\nEdit My.cnf\n\nlowercasetable_names=1\n\nConfigure Shopizer with Postgresql\n\nCreate a new postgresql\n\nCREATE DATABASE SHOPIZER;\n\nCreate schema\n\nCREATE SCHEMA salesmanager;\n\nEdit sm-shop/src/main/resources/database.properties\n\n#POSTGRES\ndb.jdbcUrl=jdbc:postgresql://localhost:5432/SHOPIZER\ndb.user=postgres\ndb.password=password\ndb.driverClass=org.postgresql.Driver\nhibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\ndb.preferredTestQuery=SELECT 1\n\ndb.schema=SALESMANAGER\nhibernate.hbm2ddl.auto=update\n\nEdit shopizer/pom.xml\n\nUn-comment both postgresql dependency\n\n\t\t\torg.postgresql\n\t\t\tpostgresql\n\n\t\t-->\n\nConfigure Shopizer with Oracle\n\nTested with Oracle Express and Oracle Entreprise. In this example we used Express 12c with portable database.\n\nCreate new user\n\nCREATE USER SALESMANAGER IDENTIFIED BY password;\nGRANT CONNECT, RESOURCE, DBA TO SALESMANAGER;\n\nEdit sm-shop/src/main/resources/database.properties\n\n#ORACLE\ndb.jdbcUrl=jdbc:oracle:thin:@localhost:1521/XEPDB1\ndb.user=SALESMANAGER\ndb.password=password\ndb.driverClass=oracle.jdbc.OracleDriver\nhibernate.dialect=org.hibernate.dialect.Oracle12cDialect\ndb.preferredTestQuery=SELECT 1 FROM DUAL\n\ndb.schema=SALESMANAGER\nhibernate.hbm2ddl.auto=update\n\nEdit shopizer/pom.xml\n\nUn-comment both oracle dependency\n\n\t\t\tcom.oracle\n\t\t\tojdbc8\n\t\t\t${oracle.version}\n\n\t\t -->\n\nAlso a vm argument is required in order to support LONG TEXT datatype\nSet runtime argument like this\n\n-Doracle.jdbc.useFetchSizeWithLongColumn=true\n","wordCount":354,"type":"Content"},{"name":"Search configuration","description":"Configure Shopizer search with ElasticSearch","path":"/documentation/search","text":"","wordCount":0,"type":"TOC"},{"name":"Local configuration of ElasticSearch","description":"Describes local installation and configuration of ElasticSearch","path":"/documentation/search/elastic-local","text":"\nShopizer search\n\nElasticSearch is the software used for indexing and searching items in Shopizer. Search autocomplete and items search are functionality available from shopping jsp templates and from Shopizer REST api.\n\nShopizer has been tested with latest ElasticSearch 7.X version\n\nRequirements\n\nElastic search 7.X binaries or docker image\n\nConfigure ElasticSearch\n\nElasticSearch requires a cluser name allowing all nodes from that same cluster to connect and share information. Shopizer is configured by default to connect to an existing ElasticSearch cluster having cluster name shopizer.\n\nOne of these options are required to connect Shopizer to an ElastciSearch cluster\n\nCreate an elastic search cluster having cluster name shopizer\n\nEdit /config/elasticsearch.yml\n\nConfigure shopizer cluster name\n\n---------------------------------- Cluster -----------------------------------\n\nUse a descriptive name for your cluster:\n\ncluster.name: shopizer\n\nConfigure Shiopizer to connect with your own cluster name\n\nEdit /sm-core/src/main/resources//shopizer-core.properties\n\n#Elastic Search configurations\nelasticsearch.cluster.name=your-cluster\n\nChange the name to the the name of the cluster you have configured in elasticsearch\n\nRun ElasticSearch\n\nLocal ElasticSearch\n\nElasticSearch is a Java based application and can be started from a simple command line. ElastciSearch version 7.X requires Java 8\n\nOn a local installation start ElasticSearch with this command\n\ncd elasticsearch/bin\n./elasticsearch\n\nDocker based ElasticSearch\n\nEasiest way to have ElasticSearch running is by runing it from a Docker image\n\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:7.5.2\n\ndocker run -p 9200:9200 -p 9300:9300 \\\n-e \"discovery.type=single-node\" \\\n-e \"cluster.name=shopizer\" \\\ndocker.elastic.co/elasticsearch/elasticsearch:7.5.2\n\nMore details here Install ElasticSearch with Docker\n\nShopizer analytics using ElasicSearch\n\nShopizer uses powerfull indexing and searching technology of ElasticSearch for extracting analytics information from orders. This functionality is an option and this configuration is not required to run Shopizer search functionality. Shopizer's functionality for saving orders to ElasticSearch is included without any modifications to the code.\n\nRequirements for using order analytics in ElasticSearch\n\nHave Kibana installed or have a running Kibana Docker image connected to ElasticSearch defined cluster above\n\nKibana configurations\n\nOnce Kibana is running and connected to ElasticSearch cluster configure a new settings for orders index\n\nPUT /_ingest/pipeline/timestamp\n{\n\t\"description\": \"Creates a timestamp when a document is initially indexed\",\n\t\"processors\": [{\n\t\t\"set\": {\n\t\t\t\"field\": \"_source.timestamp\",\n\t\t\t\"value\": \"{{_ingest.timestamp}}\"\n\t\t}\n\t}]\n}\n\nPUT _template/orders\n{\n  \"index_patterns\": [\"orders-*\"],\n  \"settings\": {\n    \"index.default_pipeline\": \"timestamp\"\n  }\n}\n\nPUT _template/carts\n{\n  \"index_patterns\": [\"carts-*\"],\n  \"settings\": {\n    \"index.default_pipeline\": \"timestamp\"\n  }\n}\n\nOnce a few orders are created from Shopizer, open Kibana and explore histograms of your orders\n","wordCount":328,"type":"Content"},{"name":"Elastic Cloud configuration","description":"Describes installation and configuration of ElasticSearch in the cloud","path":"/documentation/search/elastic-cloud","text":"\nUse Elastic Cloud SaaS\n\nElastic Cloud is a SaaS allowing to create, deploy ans scal Elastic Search in the cloud that is managed by ElasticSearch. It is quite easy to create simple to complex deployments that can be scaled according to the demand for searching and indexing data from your Shopizer implementations. There is a cost of ownership for this solution that vary according to the usage and use cases. Multi Store and Multi Tenant solution may require more resources and a bigger cluster than a simple B2C e-commerce solution.\n\nPros: It is easy to create in minutesa deploment including latest ElasicSearch tools suck as Kibana, Elastic Search and more.\n\nCons: It might be expensive to run a fault tolerant cluster in multiple regions with a large number of resources.\n\nRequirements\n\nNo specific requirements f0r creating an ElsticSearch cluster on Elastic Cloud. Elastic Cloud can be accessed from here Elastc Cloud\n\nDeployment creation\n\nHere is a sample of required resources for creating minmal elastic search cluster. A simple configuration can be acieved within a single node. ElasticSearch, Kibana (visualization tool) and APM (Monitoring) are recommended tools for creating this new deployment.\n\nSimple deployment\n\nSimple deployment sample\n\nShopizer configuraion\n\nEdit /sm-core/resources/shopizer-core.properties\n\nFor this you need to have thos informations\n\nCluster name\nUsername (given during the creation process, should be 'elastic')\nPassword (given during the creation process)\nScheme (Elastic Search url scheme 'https')\nHost (Elastic Search host)\nPort (Elastic Search port)\n\nWhen clicking on Elastic Search component you can retrieve cluster name, host and port\n\nElastic Search cluster configuration\n\nConfigure elastic cloud cluster information\n\n#Elastic Search configurations required\nelasticsearch.cluster.name=your-cluster\nelasticsearch.server.host=...url...us-east-1.aws.found.io\nelasticsearch.server.protocole=https\nelasticsearch.server.port=9243\nelasticsearch.security.enabled=true\nelasticsearch.security.user=elastic\nelasticsearch.security.password=your-elastic-given-password\n\nKibana configurations\n\nClick on Kibana url and authenticate using username and password.\n\nClick on 'Dev Tools' and run those query\n\nPUT /_ingest/pipeline/timestamp\n{\n\t\"description\": \"Creates a timestamp when a document is initially indexed\",\n\t\"processors\": [{\n\t\t\"set\": {\n\t\t\t\"field\": \"_source.timestamp\",\n\t\t\t\"value\": \"{{_ingest.timestamp}}\"\n\t\t}\n\t}]\n}\n\nPUT _template/orders\n{\n  \"indexpatterns\": [\"orders\"],\n  \"settings\": {\n    \"index.default_pipeline\": \"timestamp\"\n  }\n}\n\nPUT _template/carts\n{\n  \"indexpatterns\": [\"carts*\"],\n  \"settings\": {\n    \"index.default_pipeline\": \"timestamp\"\n  }\n}\n`","wordCount":290,"type":"Content"},{"name":"Commerce software","description":"Shopizer software design","path":"/software","text":"","wordCount":0,"type":"TOC"},{"name":"Users","description":"Administration of users","path":"/software/users","text":"Users administration\n\nBusiness rules\n\n|Role                                       |Description                                             |\n|-------------------------------------------|--------------------------------------------------------|\n|superadmin                                 |Can create, modify any user of any stores               |\n|admin                                      |Can create, modify any user its pertaining store        |\n|admin_store                                |Can create, modify any user its pertaining store        |\n|admin_retail                               |Can only modify their profile, Deletion is not supported|\n\nGlobal Rules\n\nUser even if superuser can‚Äôt change roles\nSuperuser can‚Äôt create superuser\nAdmins can‚Äôt delete or modify superuser\n\nPages rules\n\nUser List\n\nWhen login in as super admin all users are displayed in the list\nWhen login in a any other admin only users from same store are displayed in the list\nUser cannot delete himself, he has to rely on other admin\n\nCreate / modify user page\n\nCannot assign group to superadmin\nSelf cannot edit it‚Äôs own groups\nSelf cannot change merchant store\nDefault selected merchant is current user merchant\n\nSchema\n\nUSER\nMERCHANT_STORE\nSM_GROUP\nUSER_GROUP\nPERMISSION_GROUP\nPERMISSION\n\nUsers belong to MERCHANT_STORE. Users are assigned to groups having predefined sets of permissions.\n\nUser database tables\n\nRest api Examples\n\nSome postman examples are available here (import collection in Postman)\n\nUsers management","wordCount":146,"type":"Content"},{"name":"Vendors","description":"Merchants and stores administration","path":"/software/vendors","text":"This section explains possible possible configurations for MerchantStore in order to use the app as a single store application, multiple store application (marketplace) or retailer - store application.\n\nMerchant stores diagram\n\nSingle store\n\nSimple stores are unique stores managing their own products and inventory. This type of store is configured by default in Shopizer and is created with unique store code DEFAULT. Front end can be served by default jsp shop or Angular and ReactJS examples\n\nMultiple stores\n\nMultiple independent stores can be managed in Shopizer. Each store has its own configuration and each store manages their own inventory, products, category and content. Each store requires their own shop that can be run on independent processes. Default jsp, Angular and React store fronts can be used as different processes to run each store.\n\nSchema\n\nMERCHANT_STORE\nMERCHANT_LANGUAGE\n\nA MERCHANT (vendor) can be standalone for single stores use cases. A MERCHANT can have a parent for franchiser / franchisee\nuse cases.\n\nA MERCHANT can be support one to multiple languages\n\nMerchant database table\n\nRest api Examples\n\nSome postman examples are available here (import collection in Postman)\n\nvendors / stores management\n","wordCount":173,"type":"Content"},{"name":"Catalog","description":"Catalog fmanage,emt","path":"/software/catalog","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopping cart functions","description":"Shopping cart functions described","path":"/software/cart","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Ordering functions","description":"Ordering functons described","path":"/software/order","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Customer functions","description":"Customer functons described","path":"/software/customer","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer translation","description":"Translate to other lamguages","path":"/software/translation","text":"Shopizer language pack generator\n\nThis software generates Shopizer labels for a new language. Shopizer comes with a few language packs already created such as english and frech; when a new language is required 2 options are possible (1) copy and create languages by hand or (2) use this software to auto-generate a new one.\n\nShopizer translation diagram\n\nrequirements\n\n  -- Most recent version of Shopizer on your machine\n  -- An AWS (Amazon Web Service) account\n  -- Java SDK (version 1.8 +)\n\nprepare instructions\n\nClone Shopizer from github\ngit clone -b master https://github.com/shopizer-ecommerce/shopizer.git\n\n Look in shopizer/sm-shop/src/main/resources/bundles if language files are already there for required language (files have this format file.properties (ex shopizerfr.properties)\n Add role to AWS user\n Log on to AWS and add 'TranslateFullAccess' to your favorite user. See this document for more details https://docs.aws.amazon.com/IAM/latest/UserGuide/idrolescreate_for-user.html\n Get your AWS access key and secret access key (more details here https://aws.amazon.com/premiumsupport/knowledge-center/create-access-key/)\n\ngenerate language instructions\n  Clone Language software from github\ngit clone -b master https://github.com/shopizer-ecommerce/languages.git\n  Build language application\n\ncd LanguagePackBuilder\nmvnw clean install\n\n  Execute generate language\n    Requires shopizer directory absolute path (1)\n    Requires target language 2 letter iso ced (example es for Spanish) (2)\n    Requires AWS access key (3)\n    Requires AWS secret access key (4)\n    parameters 1 and 2 to be sent as execution parameters and parameters 3 and 4 to be sent as environment variables\n\ncd target\njava -jar LanguagePackBuilder-1.0.0-SNAPSHOT.jar com.shopizer.tools.language.LanguagePackBuilder path language -DAWSACCESSKEYID=abd...xyz -DAWSSECRETACCESSKEY=xyz...123\nShare your new language with us !\n\n  Sanitize and 2x check results before sharing\n  Open a pull request in Shopizer","wordCount":236,"type":"Content"},{"name":"Rules system","description":"Shopizer's rule system","path":"/software/rules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer modules","description":"Shopizer modules design","path":"/software/modules","text":"","wordCount":0,"type":"TOC"},{"name":"What are modules","description":"how to read the process documentation","path":"/software/modules/introduction","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shipping module","description":"how to create new Pages for the application","path":"/software/modules/shipping-modules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Payment module","description":"how to create new Pages for the application","path":"/software/modules/payment-modules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Database schema","description":"anything about process","path":"/databaseschema","text":"","wordCount":0,"type":"TOC"},{"name":"Country and Zones","description":"Country and Zones reference data","path":"/databaseschema/countryandzones","text":"\nCountry codes\n\nCountry codes are defined in shopizer sm-core SchemaConstants (com.salesmanager.core.constants.SchemaConstants)\n\n\tpublic static final String[] COUNTRYISOCODE = { \"AF\",\"AX\",\"AL\",\"DZ\",\n\t\t\"AS\",\"AD\",\"AO\",\"AI\",\"AQ\",\"AG\",\"AR\",\"AM\",\"AW\",\"AU\",\"AT\",\"AZ\",\"BS\",\"BH\",\n\t\t\"BD\",\"BB\",\"BY\",\"BE\",\"BZ\",\"BJ\",\"BM\",\"BT\",\"BO\",\"BA\",\"BW\",\"BV\",\"BR\",\"IO\",\n\t\t\"BN\",\"BG\",\"BF\",\"BI\",\"KH\",\"CM\",\"CA\",\"CV\",\"KY\",\"CF\",\"TD\",\"CL\",\"CN\",\"CX\",\n\t\t\"CC\",\"CO\",\"KM\",\"CG\",\"CD\",\"CK\",\"CR\",\"CI\",\"HR\",\"CU\",\"CY\",\"CZ\",\"DK\",\"DJ\",\n\t\t\"DM\",\"DO\",\"EC\",\"EG\",\"SV\",\"GQ\",\"ER\",\"EE\",\"ET\",\"FK\",\"FO\",\"FJ\",\"FI\",\"FR\",\n\t\t\"GF\",\"PF\",\"TF\",\"GA\",\"GM\",\"GE\",\"DE\",\"GH\",\"GI\",\"GR\",\"GL\",\"GD\",\"GP\",\"GU\",\n\t\t\"GT\",\"GG\",\"GN\",\"GW\",\"GY\",\"HT\",\"HM\",\"VA\",\"HN\",\"HK\",\"HU\",\"IS\",\"IN\",\"ID\",\n\t\t\"IR\",\"IQ\",\"IE\",\"IM\",\"IL\",\"IT\",\"JM\",\"JP\",\"JE\",\"JO\",\"KZ\",\"KE\",\"KI\",\"KP\",\n\t\t\"KR\",\"KW\",\"KG\",\"LA\",\"LV\",\"LB\",\"LS\",\"LR\",\"LY\",\"LI\",\"LT\",\"LU\",\"MO\",\"MK\",\n\t\t\"MG\",\"MW\",\"MY\",\"MV\",\"ML\",\"MT\",\"MH\",\"MQ\",\"MR\",\"MU\",\"YT\",\"MX\",\"FM\",\"MD\",\n\t\t\"MC\",\"MN\",\"ME\",\"MS\",\"MA\",\"MZ\",\"MM\",\"NA\",\"NR\",\"NP\",\"NL\",\"AN\",\"NC\",\"NZ\",\n\t\t\"NI\",\"NE\",\"NG\",\"NU\",\"NF\",\"MP\",\"NO\",\"OM\",\"PK\",\"PW\",\"PS\",\"PA\",\"PG\",\"PY\",\n\t\t\"PE\",\"PH\",\"PN\",\"PL\",\"PT\",\"PR\",\"QA\",\"RE\",\"RO\",\"RU\",\"RW\",\"SH\",\"KN\",\"LC\",\n\t\t\"PM\",\"VC\",\"WS\",\"SM\",\"ST\",\"SA\",\"SN\",\"RS\",\"SC\",\"SL\",\"SG\",\"SK\",\"SI\",\"SB\",\n\t\t\"SO\",\"ZA\",\"GS\",\"ES\",\"LK\",\"SD\",\"SR\",\"SJ\",\"SZ\",\"SE\",\"CH\",\"SY\",\"TW\",\"TJ\",\n\t\t\"TZ\",\"TH\",\"TL\",\"TG\",\"TK\",\"TO\",\"TT\",\"TN\",\"TR\",\"TM\",\"TC\",\"TV\",\"UG\",\"UA\",\n\t\t\"AE\",\"GB\",\"US\",\"UM\",\"UY\",\"UZ\",\"VU\",\"VE\",\"VN\",\"VG\",\"VI\",\"WF\",\"EH\",\n\t    \"YE\",\"ZM\",\"ZW\" };\n\nCountry description are derived from java Locale class and then saved to\nCountryDescription table\n\nCountry and Zones\n","wordCount":33,"type":"Content"},{"name":"REST api","description":"commerce REST api explained","path":"/rest","text":"","wordCount":0,"type":"TOC"},{"name":"Swagger documentation","description":"REST api documentation generated by Swagger annotations","path":"/rest/swaggerdoc","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Handling REST errors","description":"REST errors format","path":"/rest/resterrors","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Creating new REST services","description":"This document explains how to create new REST services","path":"/rest/newrestservices","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer security","description":"Shopizer security explained","path":"/security","text":"","wordCount":0,"type":"TOC"},{"name":"Spring security","description":"Spring security and Shopizer","path":"/security/springsecurity","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Admin authentication","description":"Admin authentication explained","path":"/security/adminauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Customer authentication","description":"Customer authentication explained","path":"/security/customerauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"REST api authentication","description":"Authenticating through REST api","path":"/security/apiauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer metrics","description":"Shopizer generated data and metrics","path":"/metrics","text":"","wordCount":0,"type":"TOC"},{"name":"Configure analytics","description":"","path":"/metrics/analytics","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Discover Shopizer e-commerce data","description":"Use Kibana to discover order related data capable of giving insights to your e-commerce business","path":"/metrics/discover","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploying Shopizer Monolith","description":"Deploying Shopizer on premise and in the Cloud","path":"/deployment","text":"","wordCount":0,"type":"TOC"},{"name":"Deploy Shopizer on premise","description":"","path":"/deployment/onpremisedeployment","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploy Shopizer on AWS","description":"","path":"/deployment/clouddeployment","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploy Shopizer on various clouds","description":"","path":"/deployment/cloud","text":"AWS\n\nSimple LightSail (VM) with SSL\nSimple LightSail (VM) with managed SQL\nEC2 with load balancer and managed SQL\nECS (Elastic Container Service)\nEKS (Kubernetes)\n\nGoogle Cloud Platform\n\nOpenShift","wordCount":22,"type":"Content"},{"name":"AWS Lightsail simple deployment","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Let's encrypt SSL","path":"/deployment/cloud/lightsail-simple","text":"This simple infrastructure allows running Shopizer on a simple AWS LightSail virtual maching. An Ubuntu based LightSail virtual machine will be configured with NGINX proxy server with SSL configured with Let's encrypt / Certbot SSL cerificate and Docker Compose running Shopizer, MySQL and ElasticSearch containers.\n\n> $\n> AWS LightSail\n> Linux / Unix - OS Only\n> Ubuntu 18.0.4 LTS\n> 4GB - 2vCPU - 80GB\n\nAWS LightSail VM diagram\n\nRequirements\nAWS Account\nA domain name with a registrar + access to DNS console\nHave Shopizer configurations handy\n\nInstallation instructions\n\nThe following section describes complete installation steps\n\nLightsail\n\n  In AWS Console\n    Create new LightSail instance\n    Select blueprint OS Only\n      select Ubuntu server from the list, last version available is preferable\n      click on 'Add launch script' and copy following script in the box in the text box\n\n#!/bin/bash\n\ninstall latest version of docker the lazy way\ncurl -sSL https://get.docker.com | sh\n\nmake it so you don't need to sudo to run docker commands\nusermod -aG docker ubuntu\n\ninstall docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\ncopy the dockerfile into /srv/docker\nif you change this, change the systemd service file to match\nWorkingDirectory=[whatever you have below]\nmkdir /srv/docker\nsudo curl -o /srv/docker/docker-compose.yml https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-aws.yml\n\ncopy in systemd unit file and register it so our compose file runs\non system restart\nsudo curl -o /etc/systemd/system/docker-compose-app.service https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-app.service\n\nsudo chmod 755 /etc/systemd/system/docker-compose-app.service\nsudo systemctl enable docker-compose-app\n\nAll commands above simplify docker and docker compose installation. They also pull pre configured docker-compose file ready to run Shopizer's latest version\n\n  In AWS Console\n    Complete LightSail configuration\n      select an instance plan for a 4GB server (requires running the server, nginx, mysql and elastic)\n      ssh key pair create new\n      give a name to keypair (ie my-shopizer-lightsail)\n      download key and save pem file to a secure location\n      if you are on a mac or linux change mode on downloaded key file       create unique instance name (ie my-shopizer-docker-compose)\n      add key value tage Name = my-shopizer-docker-compose\n      click create instance\n\nInstall NGINX\n\nFrom AWS LightSail ssh console\n\nsudo apt update\nsudo apt install nginx\nsystemctl status nginx\n\nTest NGINX installation\n\ncurl http://localhost\n\nConfigure NGINX reverse proxy\n\nReverse proxy allows to proxy requests on port 80 and 443 to Shopizer running instance on port 8080\n\nsudo unlink /etc/nginx/sites-enabled/default\ncd /etc/nginx/sites-available\nsudo nano reverse-proxy.conf\n\nCopy those following lines in open for edit window (nano)\n\nserver {\n        listen 80;\n        listen [::]:80;\n        server_name yourwebsite.ca;\n        access_log /var/log/nginx/reverse-access.log;\n        error_log /var/log/nginx/reverse-error.log;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxysetheader X-Forwarded-For $proxyaddxforwardedfor;\n            proxysetheader X-Forwarded-Proto $scheme;\n        }\n}\n\nserver {\n    listen 80;\n    servername ipaddress;\n    return 301 $scheme://yourwebsite.ca$request_uri;\n}\n\nChange server_name to your target domain name\n\nExit from nano and save (Ctrl X)\n\nCopy the configuration from /etc/nginx/sites-available to /etc/nginx/sites-enabled. It is recommended to use a symbolic link.\n\nsudo ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf\n\nvalidate NGINX configuration\n\nsudo nginx -t\n\nPrevious command should not display any error\n\nrestart NGINX\n\nsudo systemctl restart nginx\n\nFor SSL = Install Certbot on your instance\n\nCertbot installation commands from apt package manager. This is only possible if selected LightSail OS is Ubuntu.\n\nsudo apt-get update\nsudo apt-get install software-properties-common\nsudo apt-get install certbot\nsudo apt-get update\nsudo apt-get install python-certbot-nginx\n\nNow run Certbot SSL configuration for NGINX. Make sure your domain points to AWS LightSail IP address before running next command. From your registrar configure DNS for a new A record or AAA record and point to your AWS instance IP address.\n\nsudo certbot --nginx\n\nOpen LightSail required ports\n\nLightsail\nOpen ports\n80\n443\n22\n","wordCount":505,"type":"Content"},{"name":"AWS Lightsail with node - Angular admin - Shopizer backend","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/deployment/cloud/lightsail-admin-backend","text":"This simple infrastructure allows running Shopizer on a simple AWS LightSail virtual maching. An Ubuntu based LightSail virtual machine will be configured with NGINX proxy server and Shopizer Admin Angular application with Shopizer backend\n\n> $\n> AWS LightSail\n> Linux / Unix - OS Only\n> Ubuntu 18.0.4 LTS\n> 4GB - 2vCPU - 80TB\n\nThis configuration can be done on any the of virtual machine or on any on premise server. The reason for using AWS Lightsail is the simple way to configure working vm on specific regions with tools handy for specific firewall configuration and backup facility. All of this could also be created using simple EC2 instances on AWS.\n\n###DOCUMENTATION TO BE COMPLETED SOON\n\nAWS LightSail VM diagram\n\nRequirements\nAWS Account\nHave Shopizer configurations handy\n\nInstallation instructions\n\nThe following section describes complete installation steps\n\nLightsail\n\n  In AWS Console\n    Create new LightSail instance\n    Select blueprint OS Only\n      select Ubuntu server from the list, last version available is preferable\n      click on 'Add launch script' and copy following script in the box in the text box\n\n#!/bin/bash\n\ninstall latest version of docker the lazy way\ncurl -sSL https://get.docker.com | sh\n\nmake it so you don't need to sudo to run docker commands\nusermod -aG docker ubuntu\n\ninstall docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\ncopy the dockerfile into /srv/docker\nif you change this, change the systemd service file to match\nWorkingDirectory=[whatever you have below]\nmkdir /srv/docker\nsudo curl -o /srv/docker/docker-compose.yml https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-aws.yml\n\ncopy in systemd unit file and register it so our compose file runs\non system restart\nsudo curl -o /etc/systemd/system/docker-compose-app.service https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-app.service\n\nsudo chmod 755 /etc/systemd/system/docker-compose-app.service\nsudo systemctl enable docker-compose-app\n\nAll commands above simplify docker and docker compose installation. They also pull pre configured docker-compose file ready to run Shopizer's latest version\n\n  In AWS Console\n    Complete LightSail configuration\n      select an instance plan for a 4GB server (requires running the server, nginx, mysql and elastic)\n      ssh key pair create new\n      give a name to keypair (ie my-shopizer-lightsail)\n      download key and save pem file to a secure location\n      if you are on a mac or linux change mode on downloaded key file       create unique instance name (ie my-shopizer-docker-compose)\n      add key value tage Name = my-shopizer-docker-compose\n      click create instance\n\nInstall NGINX\n\nFrom AWS LightSail ssh console\n\nsudo apt update\nsudo apt install nginx\nsystemctl status nginx\n\nTest NGINX installation\n\ncurl http://localhost\n\nConfigure NGINX reverse proxy\n\nReverse proxy allows to proxy requests on port 80 and 443 to Shopizer running instance on port 8080\n\nsudo unlink /etc/nginx/sites-enabled/default\ncd /etc/nginx/sites-available\nsudo nano reverse-proxy.conf\n\nCopy those following lines in open for edit window (nano)\n\nserver {\n        listen 80;\n        listen [::]:80;\n        server_name yourwebsite.ca;\n        access_log /var/log/nginx/reverse-access.log;\n        error_log /var/log/nginx/reverse-error.log;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxysetheader X-Forwarded-For $proxyaddxforwardedfor;\n            proxysetheader X-Forwarded-Proto $scheme;\n        }\n}\n\nChange server_name to your target domain name\n\nExit from nano and save (Ctrl X)\n\nCopy the configuration from /etc/nginx/sites-available to /etc/nginx/sites-enabled. It is recommended to use a symbolic link.\n\nsudo ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf\n\nvalidate NGINX configuration\n\nsudo nginx -t\n\nPrevious command should not display any error\n\nrestart NGINX\n\nsudo systemctl restart nginx\n\nFor SSL = Install Certbot on your instance\n\nOpen LightSail required ports\n\nLightsail\nOpen ports\n80\n9090\n22\n","wordCount":464,"type":"Content"},{"name":"Deploying Microservices","description":"Deploying Shopizer microservices and in the Cloud","path":"/micro","text":"","wordCount":0,"type":"TOC"},{"name":"Services","description":"","path":"/micro/microservices","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Merchant service","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Let's encrypt SSL","path":"/micro/microservices/merchant-service","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Common service module","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/micro/microservices/common-service","text":"Available soon","wordCount":2,"type":"Content"},{"name":"IAM service","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/micro/microservices/IAM-service","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shipping service","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/micro/microservices/shipping-service","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Catalogue service","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/micro/microservices/Catalogue-service","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Reference Documentation","description":"","path":"/micro/microservice-docreference","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploy Shopizer on various clouds","description":"","path":"/micro/cloud","text":"AWS\n\nSimple LightSail (VM) with SSL\nSimple LightSail (VM) with managed SQL\nEC2 with load balancer and managed SQL\nECS (Elastic Container Service)\nEKS (Kubernetes)\n\nGoogle Cloud Platform\n\nOpenShift","wordCount":22,"type":"Content"},{"name":"AWS Lightsail simple deployment","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Let's encrypt SSL","path":"/micro/cloud/lightsail-simple","text":"This simple infrastructure allows running Shopizer on a simple AWS LightSail virtual maching. An Ubuntu based LightSail virtual machine will be configured with NGINX proxy server with SSL configured with Let's encrypt / Certbot SSL cerificate and Docker Compose running Shopizer, MySQL and ElasticSearch containers.\n\n> $\n> AWS LightSail\n> Linux / Unix - OS Only\n> Ubuntu 18.0.4 LTS\n> 4GB - 2vCPU - 80GB\n\nAWS LightSail VM diagram\n\nRequirements\nAWS Account\nA domain name with a registrar + access to DNS console\nHave Shopizer configurations handy\n\nInstallation instructions\n\nThe following section describes complete installation steps\n\nLightsail\n\n  In AWS Console\n    Create new LightSail instance\n    Select blueprint OS Only\n      select Ubuntu server from the list, last version available is preferable\n      click on 'Add launch script' and copy following script in the box in the text box\n\n#!/bin/bash\n\ninstall latest version of docker the lazy way\ncurl -sSL https://get.docker.com | sh\n\nmake it so you don't need to sudo to run docker commands\nusermod -aG docker ubuntu\n\ninstall docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\ncopy the dockerfile into /srv/docker\nif you change this, change the systemd service file to match\nWorkingDirectory=[whatever you have below]\nmkdir /srv/docker\nsudo curl -o /srv/docker/docker-compose.yml https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-aws.yml\n\ncopy in systemd unit file and register it so our compose file runs\non system restart\nsudo curl -o /etc/systemd/system/docker-compose-app.service https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-app.service\n\nsudo chmod 755 /etc/systemd/system/docker-compose-app.service\nsudo systemctl enable docker-compose-app\n\nAll commands above simplify docker and docker compose installation. They also pull pre configured docker-compose file ready to run Shopizer's latest version\n\n  In AWS Console\n    Complete LightSail configuration\n      select an instance plan for a 4GB server (requires running the server, nginx, mysql and elastic)\n      ssh key pair create new\n      give a name to keypair (ie my-shopizer-lightsail)\n      download key and save pem file to a secure location\n      if you are on a mac or linux change mode on downloaded key file       create unique instance name (ie my-shopizer-docker-compose)\n      add key value tage Name = my-shopizer-docker-compose\n      click create instance\n\nInstall NGINX\n\nFrom AWS LightSail ssh console\n\nsudo apt update\nsudo apt install nginx\nsystemctl status nginx\n\nTest NGINX installation\n\ncurl http://localhost\n\nConfigure NGINX reverse proxy\n\nReverse proxy allows to proxy requests on port 80 and 443 to Shopizer running instance on port 8080\n\nsudo unlink /etc/nginx/sites-enabled/default\ncd /etc/nginx/sites-available\nsudo nano reverse-proxy.conf\n\nCopy those following lines in open for edit window (nano)\n\nserver {\n        listen 80;\n        listen [::]:80;\n        server_name yourwebsite.ca;\n        access_log /var/log/nginx/reverse-access.log;\n        error_log /var/log/nginx/reverse-error.log;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxysetheader X-Forwarded-For $proxyaddxforwardedfor;\n            proxysetheader X-Forwarded-Proto $scheme;\n        }\n}\n\nserver {\n    listen 80;\n    servername ipaddress;\n    return 301 $scheme://yourwebsite.ca$request_uri;\n}\n\nChange server_name to your target domain name\n\nExit from nano and save (Ctrl X)\n\nCopy the configuration from /etc/nginx/sites-available to /etc/nginx/sites-enabled. It is recommended to use a symbolic link.\n\nsudo ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf\n\nvalidate NGINX configuration\n\nsudo nginx -t\n\nPrevious command should not display any error\n\nrestart NGINX\n\nsudo systemctl restart nginx\n\nFor SSL = Install Certbot on your instance\n\nCertbot installation commands from apt package manager. This is only possible if selected LightSail OS is Ubuntu.\n\nsudo apt-get update\nsudo apt-get install software-properties-common\nsudo apt-get install certbot\nsudo apt-get update\nsudo apt-get install python-certbot-nginx\n\nNow run Certbot SSL configuration for NGINX. Make sure your domain points to AWS LightSail IP address before running next command. From your registrar configure DNS for a new A record or AAA record and point to your AWS instance IP address.\n\nsudo certbot --nginx\n\nOpen LightSail required ports\n\nLightsail\nOpen ports\n80\n443\n22\n","wordCount":505,"type":"Content"},{"name":"AWS Lightsail with node - Angular admin - Shopizer backend","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Shopizer admin Angular app with Shopizer backend","path":"/micro/cloud/lightsail-admin-backend","text":"This simple infrastructure allows running Shopizer on a simple AWS LightSail virtual maching. An Ubuntu based LightSail virtual machine will be configured with NGINX proxy server and Shopizer Admin Angular application with Shopizer backend\n\n> $\n> AWS LightSail\n> Linux / Unix - OS Only\n> Ubuntu 18.0.4 LTS\n> 4GB - 2vCPU - 80TB\n\nThis configuration can be done on any the of virtual machine or on any on premise server. The reason for using AWS Lightsail is the simple way to configure working vm on specific regions with tools handy for specific firewall configuration and backup facility. All of this could also be created using simple EC2 instances on AWS.\n\n###DOCUMENTATION TO BE COMPLETED SOON\n\nAWS LightSail VM diagram\n\nRequirements\nAWS Account\nHave Shopizer configurations handy\n\nInstallation instructions\n\nThe following section describes complete installation steps\n\nLightsail\n\n  In AWS Console\n    Create new LightSail instance\n    Select blueprint OS Only\n      select Ubuntu server from the list, last version available is preferable\n      click on 'Add launch script' and copy following script in the box in the text box\n\n#!/bin/bash\n\ninstall latest version of docker the lazy way\ncurl -sSL https://get.docker.com | sh\n\nmake it so you don't need to sudo to run docker commands\nusermod -aG docker ubuntu\n\ninstall docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\ncopy the dockerfile into /srv/docker\nif you change this, change the systemd service file to match\nWorkingDirectory=[whatever you have below]\nmkdir /srv/docker\nsudo curl -o /srv/docker/docker-compose.yml https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-aws.yml\n\ncopy in systemd unit file and register it so our compose file runs\non system restart\nsudo curl -o /etc/systemd/system/docker-compose-app.service https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-app.service\n\nsudo chmod 755 /etc/systemd/system/docker-compose-app.service\nsudo systemctl enable docker-compose-app\n\nAll commands above simplify docker and docker compose installation. They also pull pre configured docker-compose file ready to run Shopizer's latest version\n\n  In AWS Console\n    Complete LightSail configuration\n      select an instance plan for a 4GB server (requires running the server, nginx, mysql and elastic)\n      ssh key pair create new\n      give a name to keypair (ie my-shopizer-lightsail)\n      download key and save pem file to a secure location\n      if you are on a mac or linux change mode on downloaded key file       create unique instance name (ie my-shopizer-docker-compose)\n      add key value tage Name = my-shopizer-docker-compose\n      click create instance\n\nInstall NGINX\n\nFrom AWS LightSail ssh console\n\nsudo apt update\nsudo apt install nginx\nsystemctl status nginx\n\nTest NGINX installation\n\ncurl http://localhost\n\nConfigure NGINX reverse proxy\n\nReverse proxy allows to proxy requests on port 80 and 443 to Shopizer running instance on port 8080\n\nsudo unlink /etc/nginx/sites-enabled/default\ncd /etc/nginx/sites-available\nsudo nano reverse-proxy.conf\n\nCopy those following lines in open for edit window (nano)\n\nserver {\n        listen 80;\n        listen [::]:80;\n        server_name yourwebsite.ca;\n        access_log /var/log/nginx/reverse-access.log;\n        error_log /var/log/nginx/reverse-error.log;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxysetheader X-Forwarded-For $proxyaddxforwardedfor;\n            proxysetheader X-Forwarded-Proto $scheme;\n        }\n}\n\nChange server_name to your target domain name\n\nExit from nano and save (Ctrl X)\n\nCopy the configuration from /etc/nginx/sites-available to /etc/nginx/sites-enabled. It is recommended to use a symbolic link.\n\nsudo ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf\n\nvalidate NGINX configuration\n\nsudo nginx -t\n\nPrevious command should not display any error\n\nrestart NGINX\n\nsudo systemctl restart nginx\n\nFor SSL = Install Certbot on your instance\n\nOpen LightSail required ports\n\nLightsail\nOpen ports\n80\n9090\n22\n","wordCount":464,"type":"Content"}]